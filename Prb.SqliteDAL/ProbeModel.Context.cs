//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Prb.SqliteDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProbeDBEntities : DbContext
    {
        public ProbeDBEntities()
            : base("name=ProbeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<DomainUsersInfo> DomainUsersInfoes { get; set; }
        public virtual DbSet<Hw_DetailInfo> Hw_DetailInfo { get; set; }
        public virtual DbSet<Hw_IpMacAddress> Hw_IpMacAddress { get; set; }
        public virtual DbSet<Hw_MasterInfo> Hw_MasterInfo { get; set; }
        public virtual DbSet<Hw_Sw_Installed> Hw_Sw_Installed { get; set; }
        public virtual DbSet<Hw_Sw_Running> Hw_Sw_Running { get; set; }
        public virtual DbSet<Hw_Sw_Services> Hw_Sw_Services { get; set; }
        public virtual DbSet<Hw_Type> Hw_Type { get; set; }
        public virtual DbSet<Prb_Schedule> Prb_Schedule { get; set; }
        public virtual DbSet<Prb_Setting> Prb_Setting { get; set; }
        public virtual DbSet<Prb_Site> Prb_Site { get; set; }
        public virtual DbSet<Prb_SiteCredential> Prb_SiteCredential { get; set; }
        public virtual DbSet<Prb_Status> Prb_Status { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Prb_ADConnectionFailure> Prb_ADConnectionFailure { get; set; }
    
        public virtual ObjectResult<SP_Hw_MasterInfo_Result> SP_Hw_MasterInfo(Nullable<int> hwMasterInfoId, Nullable<int> siteId, Nullable<int> operationId)
        {
            var hwMasterInfoIdParameter = hwMasterInfoId.HasValue ?
                new ObjectParameter("HwMasterInfoId", hwMasterInfoId) :
                new ObjectParameter("HwMasterInfoId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Hw_MasterInfo_Result>("SP_Hw_MasterInfo", hwMasterInfoIdParameter, siteIdParameter, operationIdParameter);
        }
    
        public virtual int SP_Hw_MasterInfo_InsertData(string masterInfoXml)
        {
            var masterInfoXmlParameter = masterInfoXml != null ?
                new ObjectParameter("MasterInfoXml", masterInfoXml) :
                new ObjectParameter("MasterInfoXml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Hw_MasterInfo_InsertData", masterInfoXmlParameter);
        }
    
        public virtual int SP_Prb_Schedule(ObjectParameter returnValue, Nullable<int> scheduleId, Nullable<int> siteId, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, string description, Nullable<int> statusId, Nullable<bool> isDeleted, Nullable<int> userId, Nullable<int> operationId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));
    
            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Prb_Schedule", returnValue, scheduleIdParameter, siteIdParameter, startDateTimeParameter, endDateTimeParameter, descriptionParameter, statusIdParameter, isDeletedParameter, userIdParameter, operationIdParameter);
        }
    
        public virtual ObjectResult<SP_Prb_Setting_Result> SP_Prb_Setting(Nullable<int> settingId, Nullable<int> siteId, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<int> operationId)
        {
            var settingIdParameter = settingId.HasValue ?
                new ObjectParameter("SettingId", settingId) :
                new ObjectParameter("SettingId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Prb_Setting_Result>("SP_Prb_Setting", settingIdParameter, siteIdParameter, isActiveParameter, isDeletedParameter, operationIdParameter);
        }
    
        public virtual ObjectResult<SP_Prb_Site_Result> SP_Prb_Site(Nullable<int> siteId, string customerName, string description, Nullable<bool> isActive, Nullable<bool> isDeleted, Nullable<int> operationId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Prb_Site_Result>("SP_Prb_Site", siteIdParameter, customerNameParameter, descriptionParameter, isActiveParameter, isDeletedParameter, operationIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SpClearAllTablesData_Result> SpClearAllTablesData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpClearAllTablesData_Result>("SpClearAllTablesData");
        }
    }
}
